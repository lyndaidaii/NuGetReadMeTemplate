name: Create Issues on Multiple Repositories

on:
  push:
    branches:
      - main

jobs:
  create_issues:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Issues
        uses: actions/github-script@v5
        with:
          github-token: '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'
          script: |
            try {
              //const repos = [ 'NuGet/NuGetGallery', 'NuGet/NuGet.Jobs','lyndaidaii/NuGetReadMeTemplate', 'lyndaidaii/TestWithSVG']; // List of repositories
              const packages = {
              'materialdesignthemes': 'MaterialDesignInXAML/MaterialDesignInXamlToolkit',
              'opencvsharp4': 'shimat/opencvsharp',
              'cefsharp.winforms': 'cefsharp/cefsharp',
              'ssh.net': 'sshnet/SSH.NET/',
              'google.protobuf': 'protocolbuffers/protobuf',
              'awssdk.s3': 'aws/aws-sdk-net/',
              'naudio': 'naudio/NAudio',
              'sixlabors.imagesharp': 'SixLabors/ImageSharp',
              'zxing.net': 'micjahn/ZXing.Net/',
              'opencvsharp4.runtime.win': 'shimat/opencvsharp',
              'sqlsugarcore': 'sunkaixuan/SqlSugar',
              'mqttnet': 'dotnet/MQTTnet',
              'coverlet.collector': 'coverlet-coverage/coverlet',
              'opentk': 'opentk/opentk',
              'telegram.bot': 'TelegramBots/telegram.bot',
              'sqlsugar': 'sunkaixuan/SqlSugar',
              'opencvsharp4.extensions': 'shimat/opencvsharp',
              'awssdk.core': 'aws/aws-sdk-net/',
              'confluent.kafka': 'confluentinc/confluent-kafka-dotnet/',
              'blazored.localstorage': 'Blazored/LocalStorage',
              'stylecop.analyzers': 'DotNetAnalyzers/StyleCopAnalyzers',
              'bogus': 'bchavez/Bogus',
              'opencvsharp4.windows': 'shimat/opencvsharp',
              'mahapps.metro': 'MahApps/MahApps.Metro',
              'benchmarkdotnet': 'dotnet/BenchmarkDotNet',
              's7netplus': 'killnine/s7netplus',
              'identitymodel': 'IdentityModel/IdentityModel',
              'mapster': 'MapsterMapper/Mapster',
              'autofixture': 'AutoFixture/AutoFixture',
              'prism.wpf': 'PrismLibrary/Prism',
              'microsoft.extensions.logging.log4net.aspnetcore': 'huorswords/Microsoft.Extensions.Logging.Log4Net.AspNetCore',
              'prism.unity': 'PrismLibrary/Prism',
              'coverlet.msbuild': 'coverlet-coverage/coverlet',
              'prism.core': 'PrismLibrary/Prism',
              'ocelot': 'ThreeMammals/Ocelot',
              'extended.wpf.toolkit': 'xceedsoftware/wpftoolkit',
              'prism.dryioc': 'PrismLibrary/Prism',
              'cefsharp.wpf': 'cefsharp/cefsharp',
              'nswag.aspnetcore': 'RicoSuter/NSwag',
              'stripe.net': 'stripe/stripe-dotnet',
              'puppeteersharp': 'hardkoded/puppeteer-sharp',
              'twilio': 'twilio/twilio-csharp',
              'materialdesigncolors': 'MaterialDesignInXAML/MaterialDesign',
              'plugin.firebase': 'TobiasBuchholz/Plugin.Firebase',
              'fody': 'Fody/Fody',
              'cefsharp.common': 'cefsharp/CefSharp+A8A6:E50AA3:E50',
              'firebaseadmin': 'Firebase/firebase-admin-dotnet',
              'clickabletransparentoverlay': 'zaafar/ClickableTransparentOverlay',
              'discord.net': 'discord-net/Discord.Net',
              'miniexcel': 'mini-software/MiniExcel',
              'google.apis.auth': 'googleapis/google-api-dotnet-client',
              'bouncycastle.netcore': 'chrishaly/bc-csharp',
              'aspnetcore.healthchecks.ui.client': 'Xabaril/AspNetCore.Diagnostics.HealthChecks',
              'awssdk.extensions.netcore.setup': 'aws/aws-sdk-net/',
              'sixlabors.imagesharp.drawing': 'SixLabors/ImageSharp.Drawing',
              'pdfsharpcore': 'ststeiger/PdfSharpCore',
              'protobuf-net': 'protobuf-net/protobuf-net',
              'awssdk.dynamodbv2': 'aws/aws-sdk-net/',
              'yamldotnet': 'aaubry/YamlDotNet/wiki',
              'awssdk.sqs': 'aws/aws-sdk-net/',
              'awssdk.secretsmanager': 'aws/aws-sdk-net/',
              'aspnetcore.healthchecks.ui': 'Xabaril/AspNetCore.Diagnostics.HealthChecks',
              'jwt': 'jwt-dotnet/jwt',
              'ffmpeg.autogen': 'Ruslan-B/FFmpeg.AutoGen',
              'spectre.console': 'spectreconsole/spectre.console',
              'imgui.net': 'mellinoe/imgui.net',
              'mqttnet.extensions.managedclient': 'dotnet/MQTTnet',
              'opencvsharp4.wpfextensions': 'shimat/opencvsharp',
              'appium.webdriver': 'appium/dotnet-client',
              'sharpcompress': 'adamhathcock/sharpcompress',
              'htmlsanitizer': 'mganss/HtmlSanitizer',
              'aspnetcore.healthchecks.sqlserver': 'Xabaril/AspNetCore.Diagnostics.HealthChecks',
              'google.apis': 'googleapis/google-api-dotnet-client',
              'serilog.sinks.applicationinsights': 'serilog-contrib/serilog-sinks-applicationinsights',
              'google.apis.drive.v3': 'google/google-api-dotnet-client',
              'messagepack': 'neuecc/MessagePack-CSharp',
              'exiled': 'Exiled-Team/EXILED',
              'awssdk.securitytoken': 'aws/aws-sdk-net/',
              'helixtoolkit.wpf': 'helix-toolkit/helix-toolkit',
              'scrutor': 'khellang/Scrutor',
              'boost': 'sergey-shandar/getboost',
              'nswag.msbuild': 'RicoSuter/NSwag',
              'blazored.sessionstorage': 'Blazored/SessionStorage',
              'google.apis.sheets.v4': 'google/google-api-dotnet-client',
              'serilog.sinks.elasticsearch': 'serilog-contrib/serilog-sinks-elasticsearch',
              'materialdesignthemes.mahapps': 'MaterialDesignInXAML/MaterialDesign',
              'zxing.net.maui.controls': 'redth/ZXing.Net.Maui',
              'autofixture.automoq': 'AutoFixture/AutoFixture',
              'aspnetcore.healthchecks.ui.inmemory.storage': 'Xabaril/AspNetCore.Diagnostics.HealthChecks',
              'swashbuckle.aspnetcore.filters': 'mattfrear/Swashbuckle.AspNetCore.Filters',
              'fluentresults': 'altmann/FluentResults',
              'firebasedatabase.net': 'step-up-labs/firebase-database-dotnet'
              };
              
              const markdownContent = `
              We've noticed that your package on NuGet.org is missing a README file.

              ## Why READMEs are Important
              A README is essential for users to understand your package's purpose and functionality quickly. It's the first thing users see on NuGet.org and helps them decide if your package meets their needs.

              ## Get Started with READMEs

              ### How to Add a README
              If you're new to NuGet READMEs, follow guidance on [how to add one to your package](https://devblogs.microsoft.com/nuget/add-a-readme-to-your-nuget-package/).

              ### How to write high quality of READMEs
              Follow [a blog post](https://devblogs.microsoft.com/nuget/write-a-high-quality-readme-for-nuget-packages/) with README best practices and a template file to help you get started. 

              ## We Value Your Feedback
              We value your feedback. If you encounter any issues or have suggestions, please reply to this issue.

              Thank you for your contribution to the NuGet community.
              `;
              
              async function createIssue(repo, packageName) {
                const [owner, repoName] = repo.split('/');
                const response = await github.rest.issues.create({
                  owner: owner,
                  repo: repoName,
                  title: `${packageName} is missing NuGet package README file`,
                  body: markdownContent
                });
                console.log(`Issue created in ${repo}: for package ${packageName} `, response.data.html_url);
              }
              
              for (const packageName in packages) {
                if (Object.hasOwnProperty.call(packages, packageName)) {
                  const repo = packages[packageName];
                  try {
                    await createIssue(repo, packageName);
                  } catch (error) {
                    console.error(`Error occurred while processing package ${packageName}: ${error.message}`);
                    core.setFailed(error.message);
                  }
                }
              }
            } catch (error) {
              console.error('Error:', error.message);
              core.setFailed(error.message);
            }
